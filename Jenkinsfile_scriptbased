node {

    def mvnHome
    def nexusUrl = '54.172.22.240:8081'  // Fixed Nexus URL (no extra 'http://')
    def nexusRepo = 'ncodeit-scripted'  // Nexus repository name
    
    stage('Preparation') { // for display purposes
        // Get code from GitHub repository
        git 'https://github.com/kishangujja/spring3-mvc-maven-xml-hello-world-1.git'
        
        // Get the Maven tool. This 'MVN_HOME' must be configured globally in Jenkins.
        mvnHome = tool 'MVN_HOME'  // Use the name of the tool configured in Jenkins (MVN_HOME)
    }

    stage('Build') {
        // Run Maven build with clean and package goals
        withEnv(["MVN_HOME=$mvnHome"]) {
            if (isUnix()) {
                // Unix command for Maven build
                sh "${mvnHome}/bin/mvn -Dmaven.test.failure.ignore clean package"
            } else {
                // Windows command for Maven build
                bat("\"${mvnHome}\\bin\\mvn\" -Dmaven.test.failure.ignore clean package")
            }
        }
    }

    stage('Publish to Nexus') {
        script {
            // Read POM XML file using the 'readMavenPom' step
            def pom = readMavenPom file: "pom.xml"
            
            // Find the built artifact under the target folder
            def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
            
            // Log some details about the found artifact
            echo "Found artifact: ${filesByGlob[0].name}, path: ${filesByGlob[0].path}, size: ${filesByGlob[0].length} bytes"
            
            // Extract the artifact path
            def artifactPath = filesByGlob[0].path
            
            // Verify if the artifact exists
            def artifactExists = fileExists artifactPath
            if (artifactExists) {
                echo "*** Artifact details: File: ${artifactPath}, Group: ${pom.groupId}, Packaging: ${pom.packaging}, Version: ${pom.version}"

                // Upload the artifact and the pom.xml to Nexus
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',  // You can also use 'https' if your Nexus is configured for secure connections
                    nexusUrl: nexusUrl,  // Use the fixed URL here
                    groupId: pom.groupId,
                    version: "${BUILD_NUMBER}",  // You can replace with another versioning strategy if needed
                    repository: nexusRepo,
                    credentialsId: 'nexus_server',  // Ensure this credential ID exists in Jenkins
                    artifacts: [
                        [
                            artifactId: pom.artifactId,
                            classifier: '',
                            file: artifactPath,
                            type: pom.packaging
                        ],
                        [
                            artifactId: pom.artifactId,
                            classifier: '',
                            file: "pom.xml",
                            type: "pom"
                        ]
                    ]
                )
            } else {
                // Error handling if the artifact is not found
                error "*** Artifact file: ${artifactPath} could not be found"
            }
        }
    }
}
